default:
  alpha: 3
  theta: 0.9
  indep_sigma: 0.005
  n_forward_samples: 20000
  seed_webppl: !expr as.numeric(Sys.time())
  packages:  !expr c("./node_modules/conditionalsHelpers",
                     "./node_modules/conditionalsDefault")
  save: true
  add_accept_conditions: true
  verbose: true
  model_path: "./model/default-model/default-model.wppl"
  utts_fn: "utterances.rds"

targets_my_config:
  target_dir: "./data/default-model/my-config"

targets_paper_config:
  target_dir: "./data/default-model/paper-config"

# Douven examples
sundowners:
  model_path: "./model/douven-examples/sundowners.wppl"
  utt: "R > -S"
  prior_pr: !expr c(0.5)
  condition_on: !expr NA
  level_max: "PL"
  add_accept_conditions: false
  target_dir: "./data/douven-examples"
  target: "./data/douven-examples/results-sundowners.rds"
  target_fn: "results-sundowners.rds"
  target_params: "./data/douven-examples/params-sundowners.rds"
  target_vois: "results-sundowners-voi.rds"
  tables_fn: "tables-sundowners"
  
skiing:
  model_path: "./model/douven-examples/skiing.wppl"
  utt: "E > S"
  prior_pe: 0.2
  evidence: "C"
  condition_on: !expr c("C")
  level_max: "PL"
  add_accept_conditions: false
  target_dir: "./data/douven-examples"
  target: "./data/douven-examples/results-skiing.rds"
  target_fn: "results-skiing.rds"
  target_params: "./data/douven-examples/params-skiing.rds"
  target_vois: "results-skiing-voi.rds"
  tables_fn: "tables-skiing"
  
garden_party:
  model_path: "./model/douven-examples/garden_party.wppl"
  utt: "D > G"
  prior_pd: 0.5
  evidence: "S"
  condition_on: !expr c("S")
  level_max: "PL"
  add_accept_conditions: FALSE
  target_dir: "./data/douven-examples"
  target: "./data/douven-examples/results-gardenParty.rds"
  target_fn: "results-gardenParty.rds"
  target_params: "./data/douven-examples/params-gardenParty.rds"
  target_vois: "results-gardenParty-voi.rds"
  tables_fn: "tables-gardenParty"


## 2. Level configurations ##
# @arg utt: 
#   if set to "p_delta" or "p_rooij", respective value must be
#   large (see in webppl file) for all states given to the speaker,
#   if set to "" no condition, just sampled from prior as usual
speaker:
  level_max: "speaker"
  utt: ""
  fn_suffix: "speaker"
  n_samples: 20000 # bns sampled from prior


# speaker given certain condition,
# e.g. speaker only gets states where utt is applicable
# (use utt:"" for no condition) 
speaker_literal:
  level_max: "speaker"
  utt: "A > C" #condition s.t. only states where utt is true are considered
  n_samples: 20000 # bns sampled from prior
  fn_suffix: "speaker-literal"

speaker_p_rooij:
  level_max: "speaker"
  utt: "p_rooij"
  fn_suffix: "speaker-p_rooij-large"
  n_samples: 20000 # bns sampled from prior

# speaker only sees states where she is un/certain about A and about C
speaker_uncertain:
  inherits: speaker
  fn_suffix: "speaker-uncertain"
  utt: "uncertainAandC"
  n_samples: 20000

speaker_certain:
  inherits: speaker
  fn_suffix: "speaker-certain"
  utt: "certainAandC"
  n_samples: 20000

speaker_uncertain_certain:
  inherits: speaker
  fn_suffix: "speaker-unc-cert"
  utt: "unc-cert"
  n_samples: 20000

prior:
  level_max: "prior"
  utt: ""
  fn_suffix: "prior"

priorN:
  inherits: bias_none
  level_max: "priorN"
  utt: ""
  n_samples: 20000
  fn_suffix: "priorN"
  
priorConditioned:
  inherits: bias_none
  fn_suffix: "prior-conditioned"
  level_max: "prior_conditioned"
  utt: "certainAandC"
  n_samples: 20000

ll:
  level_max: "LL"
  utt: "A > C"
  fn_suffix: "prior-ll"

pl:
  level_max: "PL"
  utt: "A > C"
  fn_suffix: "prior-ll-pl"

# there needs to be 1 blank final line!

