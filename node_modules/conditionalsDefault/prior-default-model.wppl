var dep_cns =  ["A implies C", "A implies -C",
                "C implies A", "C implies -A"]
var cns = ["A || C"].concat(dep_cns)
globalStore.variables = ["A", "C"]

var TruncatedNormal = function(table){
   var pa = table[0] + table[1]
   var pc = table[0] + table[2]
   var lower_bound = 1-(pa+pc) >= 0 ? 0 : Math.abs(1-(pa+pc))
   var upper_bound = Math.min(pa, pc)
   var Norm = Gaussian({mu: pa * pc, sigma: globalStore.indep_sigma})
   Infer({samples: 1000, burn: 1000, method: 'MCMC', model:function(){
     var x = sample(Norm)
     condition(x >= lower_bound && x <= upper_bound)
     return(x)
   }})
}

var model_tables =  function(){
  var idx_cn = randomInteger({n: 2})
  var cn =  idx_cn == 0 ? "A || C" : uniformDraw(dep_cns)
  var p_antecedent = uniform(0,1)

  var theta = cn == "A || C" ? uniform(0,1) : beta(10,1)
  var beta_noise = cn == "A || C" ? theta : beta(1,10)
  var p_dep_pos = cn == "A || C" ? theta : theta + beta_noise * (1-theta)

  var table =
    cn == "A || C" ?
        [p_antecedent * p_dep_pos, p_antecedent * (1-p_dep_pos),
         (1-p_antecedent) * p_dep_pos, (1-p_antecedent) * (1-p_dep_pos)] :
    cn == "A implies C" ?
        [p_dep_pos * p_antecedent, (1-p_dep_pos) * p_antecedent,
         beta_noise * (1-p_antecedent), (1-beta_noise) * (1-p_antecedent)] :

    cn == "A implies -C" ?
      [(1-p_dep_pos) * p_antecedent, p_dep_pos * p_antecedent,
       (1-beta_noise) * (1-p_antecedent), beta_noise * (1-p_antecedent)] :

    cn == "C implies A" ?
      [p_dep_pos * p_antecedent, beta_noise * (1-p_antecedent),
       (1-p_dep_pos) * p_antecedent, (1-beta_noise) * (1-p_antecedent)] :

    cn == "C implies -A" ?
      [(1-p_dep_pos) * p_antecedent, (1-beta_noise) * (1-p_antecedent),
       p_dep_pos * p_antecedent, beta_noise * (1-p_antecedent)] :

    cn == "-A implies C" ?
      [beta_noise * (1-p_antecedent), (1-beta_noise) * (1-p_antecedent),
       p_dep_pos * p_antecedent, (1-p_dep_pos) * p_antecedent] :

    cn == "-A implies -C" ?
      [(1-beta_noise) * (1-p_antecedent), beta_noise * (1-p_antecedent),
       (1-p_dep_pos) * p_antecedent, p_dep_pos * p_antecedent] :

    cn == "-C implies A" ?
      [beta_noise * (1-p_antecedent), p_dep_pos * p_antecedent,
       (1-beta_noise) * (1-p_antecedent), (1-p_dep_pos) * p_antecedent] :

    cn == "-C implies -A" ?
      [(1-beta_noise) * (1-p_antecedent), (1-p_dep_pos) * p_antecedent,
       beta_noise * (1-p_antecedent), p_dep_pos * p_antecedent] :
  undefined;

  // add noise to independent tables
  var ac = cn=="A || C" ? sample(TruncatedNormal(table)) : table[0]
  var anc = cn=="A || C" ? table[0] + table[1] - ac : table[1]
  var nac = cn=="A || C" ? table[0] + table[2] - ac : table[2]
  var nanc = cn=="A || C" ? 1-(ac+anc+nac) : table[3]

  var Table = Categorical({vs: ["AC", "A-C", "-AC", "-A-C"],
                           ps: [ac, anc, nac, 1-(ac+anc+nac)]})

  return {"cn": cn, "table": Table,
          "bn_id": cn + "_" + ac + "_" + anc + "_" + nac + "_" + nanc}
}

var state_prior = function(){
  Infer({method: 'forward', samples: globalStore.n_prior_samples, model: model_tables});
}
