var TruncatedNormal = cache(function(ac){
  Infer({method:'MCMC', samples:10000, model:function(){
    var x = sample(gaussian({mu: ac, sigma: globalStore.sigma_indep}))
    condition(x >= 0 && x <= 1)
    return(Math.round(x*1000)/1000)
}})
}, 10000)

var log_likelihood = function(state){
  var p = cn_to_prob(state)
  return state.cn == "A || C" ?
    TruncatedNormal(p[2]).score(Math.round(p[0]*p[1]*100)/100) :
    // all dependent cns
    (Beta({a:10, b:1}).score(p[0]) + Beta({a:1, b:10}).score(p[1]))
}

var state_prior = cache(function(bias) {
  var distr = Infer({method:'enumerate', model:function(){
      var TableID = uniformDraw(globalStore.Tables)
      var Table = TableID.Table
      var cn = uniformDraw(globalStore.cns);
      var state = {"table": Table,
                   "cn": cn,
                   "id": TableID.id};
      let logl =
        state.cn=="A implies C" ? TableID.logL_if_ac :
        state.cn=="A implies -C" ? TableID.logL_if_anc :
        state.cn=="C implies A" ? TableID.logL_if_ca :
        state.cn=="C implies -A" ? TableID.logL_if_cna :
        state.cn=="A || C" ? TableID.logL_ind :
        log_likelihood(state);
      let log_val = !logl ? -Infinity : logl;
      factor(log_val);
      return {"bn": state}
    }});
    return(distr)
})
